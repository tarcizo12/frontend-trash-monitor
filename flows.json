[
    {
        "id": "983aca1b753bdb66",
        "type": "tab",
        "label": "Interface Lixeira Inteligente",
        "disabled": false,
        "info": ""
    },
    {
        "id": "e9f05c7e70cb58ab",
        "type": "mqtt in",
        "z": "983aca1b753bdb66",
        "name": "MQTT Lixeira",
        "topic": "resposta/volume",
        "qos": "0",
        "datatype": "auto",
        "broker": "9d5f4796e819aa41",
        "nl": false,
        "rap": true,
        "rh": 0,
        "x": 140,
        "y": 80,
        "wires": [
            [
                "8a750a42709792cb",
                "d40b877ba6839e54"
            ]
        ]
    },
    {
        "id": "8a750a42709792cb",
        "type": "function",
        "z": "983aca1b753bdb66",
        "name": "Parse MQTT Lixeira",
        "func": "// Verifica se o payload já é um objeto JSON\nif (typeof msg.payload === 'object') {\n    return msg;\n}\n\n// Caso contrário, tenta fazer o parsing do formato string\ntry {\n    const payloadStr = msg.payload.toString();\n    const regex = /ID:\\s*(\\w+),\\s*Distancia:\\s*([\\d.]+)\\s*cm,\\s*Status:\\s*([^,]+),\\s*Data\\/Hora:\\s*(.+)/;\n    const match = payloadStr.match(regex);\n    \n    if (match) {\n        msg.payload = {\n            id: match[1],\n            distancia_cm: parseFloat(match[2]),\n            status: match[3],\n            data_hora: match[4]\n        };\n    } else {\n        msg.payload = { error: \"Formato inválido\", original: payloadStr };\n    }\n} catch (e) {\n    msg.payload = { error: \"Erro no parsing\", exception: e.message };\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 80,
        "wires": [
            [
                "c2b712df5c1f1e1e"
            ]
        ]
    },
    {
        "id": "c2b712df5c1f1e1e",
        "type": "function",
        "z": "983aca1b753bdb66",
        "name": "Calcular Percentual",
        "func": "const distanciaMax = 36;\nlet distancia = parseFloat(msg.payload.distancia_cm);\n\nif (isNaN(distancia)) {\n    return null;\n}\n\nif (distancia > distanciaMax) distancia = distanciaMax;\nif (distancia < 0) distancia = 0;\n\nconst percentual = ((distanciaMax - distancia) / distanciaMax) * 100;\n\nmsg.payload.percentual = Math.round(percentual);\nmsg.payload.distanciaMax = distanciaMax;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 140,
        "wires": [
            [
                "7f5d8f7b44e9b6cd",
                "b77be09c20e18264",
                "d40b877ba6839e54",
                "a1b2c3d4e5f6g7h8"
            ]
        ]
    },
    {
        "id": "a1b2c3d4e5f6g7h8",
        "type": "function",
        "z": "983aca1b753bdb66",
        "name": "Armazenar Histórico",
        "func": "// Cria o contexto se não existir\ncontext.historico = context.historico || [];\n\n// Adiciona a nova mensagem ao histórico\ncontext.historico.unshift({\n    data_hora: msg.payload.data_hora,\n    percentual: msg.payload.percentual,\n    distancia_cm: msg.payload.distancia_cm,\n    status: msg.payload.status\n});\n\n// Mantém apenas as últimas 10 mensagens\ncontext.historico = context.historico.slice(0, 10);\n\n// Prepara a saída para o UI Template\nmsg.payload = {\n    historico: context.historico\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 260,
        "wires": [
            [
                "i9j8k7l6m5n4o3p2"
            ]
        ]
    },
    {
        "id": "i9j8k7l6m5n4o3p2",
        "type": "ui_template",
        "z": "983aca1b753bdb66",
        "group": "abf82d7d.3c0a7",
        "name": "Histórico Lixeira",
        "order": 3,
        "width": "6",
        "height": "4",
        "format": "<div style=\"font-family: Arial, sans-serif;\">\n  <h3>Últimas Leituras</h3>\n  <div class=\"ui-accordion\">\n    <div ng-repeat=\"item in msg.payload.historico\" class=\"ui-accordion-item\">\n      <div class=\"ui-accordion-header\" ng-click=\"expanded = !expanded\">\n        {{item.data_hora}} - {{item.percentual}}%\n      </div>\n      <div class=\"ui-accordion-content\" ng-show=\"expanded\">\n        <p><strong>Status:</strong> {{item.status}}</p>\n        <p><strong>Distância:</strong> {{item.distancia_cm}} cm</p>\n        <p><strong>Percentual:</strong> {{item.percentual}}%</p>\n      </div>\n    </div>\n  </div>\n</div>\n\n<style>\n.ui-accordion-item {\n  border: 1px solid #ddd;\n  margin-bottom: 5px;\n  border-radius: 4px;\n}\n.ui-accordion-header {\n  padding: 10px;\n  background-color: #f5f5f5;\n  cursor: pointer;\n}\n.ui-accordion-header:hover {\n  background-color: #e9e9e9;\n}\n.ui-accordion-content {\n  padding: 10px;\n  background-color: white;\n}\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "templateScope": "local",
        "x": 1140,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "7f5d8f7b44e9b6cd",
        "type": "ui_gauge",
        "z": "983aca1b753bdb66",
        "name": "Ocupação da Lixeira",
        "group": "abf82d7d.3c0a7",
        "order": 1,
        "width": "6",
        "height": "6",
        "gtype": "donut",
        "title": "Ocupação (%)",
        "label": "%",
        "format": "{{msg.payload.percentual}}",
        "min": 0,
        "max": 100,
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": 50,
        "seg2": 80,
        "className": "",
        "x": 940,
        "y": 140,
        "wires": []
    },
    {
        "id": "b77be09c20e18264",
        "type": "ui_text",
        "z": "983aca1b753bdb66",
        "name": "Distância da Tampa",
        "group": "abf82d7d.3c0a7",
        "order": 2,
        "width": "6",
        "height": "2",
        "label": "Distância até a Tampa (máx {{msg.payload.distanciaMax}} cm):",
        "format": "{{msg.payload.distancia_cm}} cm",
        "layout": "row-spread",
        "className": "",
        "x": 960,
        "y": 200,
        "wires": []
    },
    {
        "id": "d40b877ba6839e54",
        "type": "debug",
        "z": "983aca1b753bdb66",
        "name": "Debug MQTT",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 80,
        "wires": []
    },
    {
        "id": "9d5f4796e819aa41",
        "type": "mqtt-broker",
        "name": "broker.hivemq.com",
        "broker": "broker.hivemq.com",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": false,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "abf82d7d.3c0a7",
        "type": "ui_group",
        "name": "Lixeira Inteligente",
        "tab": "4a9bb663.1762d8",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "4a9bb663.1762d8",
        "type": "ui_tab",
        "name": "Dashboard",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    }
]